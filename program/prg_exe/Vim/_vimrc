" =======================================
" ファイルパス存在チェック
" <usage>
"   call CheckPathExists( $CTAGS )
" =======================================
	function! CheckPathExists( sPath )
		if filereadable( a:sPath )
			echo "exists!"
		else
			echo "not exists!"
		endif
	endfunction

" =======================================
" ユーザー定義プラグインフォルダを runtimepath に追加
" =======================================
	let $USERPLUGINS = $VIM . '/_plugins_user'
	for s:path in split(glob( $USERPLUGINS . '/*'), '\n')
		if s:path !~# '\~$' && isdirectory(s:path)
			let &runtimepath = &runtimepath.','.s:path
		endif
	endfor

" =======================================
" ユーザー定義エクステンションを path に追加
" =======================================
	let $EXTENTION = $VIM . '/_extention'
	for s:path in split(glob( $EXTENTION . '/*'), '\n')
		if s:path !~# '\~$' && isdirectory(s:path)
			let $PATH .= ';' . s:path
		endif
	endfor

" =======================================
" ユーザー定義フォルダ配下のヘルプファイルのタグを作成する
"	※処理が遅いため、プラグインインストール時のみ逐次実行すること
" =======================================
	function! CreateHelptags()
		for s:path in split(glob( $USERPLUGINS . '/**/doc'), '\n')
			let s:txtexists = 0
			let s:tagsexists = 0
			for s:subpath in split(glob( s:path . '/*'), '\n')
				if s:subpath =~? '.*.txt$'
					let s:txtexists = 1
				endif
				if s:subpath =~? '.*tags$'
					let s:tagsexists = 1
				endif
			endfor
			if s:txtexists == 1 && s:tagsexists == 0
				if isdirectory(s:path)
					execute "helptags " . s:path
				endif
			endif
		endfor
	endfunction

" =======================================
" neocomplete.vim 用設定
" [参照] https://github.com/Shougo/neocomplete.vim
" =======================================
	let g:neocomplete#enable_at_startup = 1 " 起動時に有効化
	let g:neocomplete#enable_smart_case = 1 " Use smartcase.
	let g:neocomplete#sources#syntax#min_keyword_length = 3
	let g:neocomplete#max_list = 50 "キーワードの長さ、デフォルトで80
	let g:neocomplete#max_keyword_width = 80
	let g:neocomplete#enable_ignore_case = 1
"	highlight Pmenu ctermbg=6
"	highlight PmenuSel ctermbg=3
"	highlight PMenuSbar ctermbg=0
	highlight Pmenu ctermbg=71
	highlight PmenuSel ctermbg=71
	highlight PMenuSbar ctermbg=71

" =======================================
" editexisting-ext.vim 用設定
" (他のVimで開いているファイルを開こうとしたときポップアップさせる)
" [参照] http://vimwiki.net/?tips%2F94
" [参照] https://github.com/koron/vim-kaoriya/issues/9
" =======================================
	packadd! editexisting

" =======================================
" テキストファイルの自動改行抑止設定
" =======================================
	autocmd BufRead *.txt set tw=0

" =======================================
" 折り畳みマーカー設定
" =======================================
	set foldmethod=marker

" =======================================
" GVim 起動時は同じウィンドウにまとめて起動する。
" [参考] http://tyru.hatenablog.com/entry/20130430/vim_resident
" =======================================
"	call singleton#enable()

" ==============================================================================
" lightline 設定
" [参考] https://github.com/itchyny/lightline.vim#landscape-theme-with-the-patched-font
" [参考] http://itchyny.hatenablog.com/entry/20130917/1379369171
" ==============================================================================
	let g:lightline = {}
"	let g:lightline.colorscheme = 'jellybeans'
	let g:lightline.enable = {
					\		'statusline': 1,
					\		'tabline': 0
					\	}
	let g:lightline.separator = { 'left': '', 'right': '' }
	let g:lightline.subseparator = { 'left': '', 'right': '|' }
	let g:lightline.active = {
					\		'left': [
					\			[ 'mode', 'paste' ],
					\			[ 'filename' ],
					\			[ 'bufnum', 'readonly', 'modified' ]
					\		],
					\		'right': [
					\			[ 'rangediff' ],
					\			[ 'lineinfo', 'percent' ],
					\			[ 'fileformat', 'fileencoding', 'filetype' ]
					\		]
					\	}
	let g:lightline.component_function = {
					\		'rangediff': 'GetSelRngDiff'
					\	}

" ==============================================================================
" ビジュアルモード文字数カウント
" 覚書：列番号取得には苦労した。。。
"		詳細は以下 URL 参照。
"		  http://www49.atwiki.jp/draemonash/pages/69.html
" ==============================================================================
	set updatetime=100 "CursorHold の閾値[ms]
	autocmd CursorMoved,CursorHold * call s:CalcSelRngStrNum()
	let s:lStrtClm = 0
	let s:lStrtRow = 0
	let s:lDiffClm = 0
	let s:lDiffRow = 0
	let g:sSelRowsRng = ""
	
	function! s:CalcSelRngStrNum()
		let l:sCurMode = mode()
		let l:lCurRow = line('.')
		if l:sCurMode ==# "v" || l:sCurMode ==# "V" || l:sCurMode ==# "\<C-v>"
			let l:lCurClm = virtcol('.')
			let s:lDiffClm = abs( l:lCurClm - s:lStrtClm ) + 1
			let s:lDiffRow = abs( l:lCurRow - s:lStrtRow ) + 1
			if s:lStrtRow > l:lCurRow
				let g:sSelRowsRng = l:lCurRow . "-" . s:lStrtRow
			else
				let g:sSelRowsRng = s:lStrtRow . "-" . l:lCurRow
			endif
		elseif l:sCurMode ==# "n"
			let l:lCurClm = virtcol( [line('.'), col('.') - 1, 0] ) + 1
			let s:lStrtClm = l:lCurClm
			let s:lStrtRow = l:lCurRow
			let s:lDiffClm = 0
			let s:lDiffRow = 0
			let g:sSelRowsRng = l:lCurRow
		else
			"Do Nothing
		endif
	endfunction
	
	function! GetSelRngDiff()
		if s:lDiffClm == 0 && s:lDiffRow == 0
			return "-"
		else
			let l:sCurMode = mode()
			if l:sCurMode ==# "v" || l:sCurMode ==# "\<C-v>"
				return "h" . s:lDiffRow . " w" . s:lDiffClm
			elseif l:sCurMode ==# "V"
				return "h" . s:lDiffRow
			elseif l:sCurMode ==# "n"
				return "-"
			else
				return "error"
			endif
		endif
	endfunction

